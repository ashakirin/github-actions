# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "master" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

env:
  AWS_REGION: us-west-2                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: rest-api           # set this to your Amazon ECR repository name
  ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
  ECS_CLUSTER: github-actions                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
  IMAGE_TAG: 0.0.1-SNAPSHOT
  CONTAINER_NAME: github-actions           # set this to the name of the container in the

  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

on: workflow_dispatch


jobs:
  push:
    name: Create Docker Image & Push
    runs-on: ubuntu-latest
    environment: production
    permissions:
      packages: write
      id-token: write
      contents: write

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Build with Maven
      run: mvn clean spring-boot:build-image -Dspring-boot.build-image.imageName=$ECR_REPOSITORY:$IMAGE_TAG

    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ASIAZUW5HRS7A6RE5E7V
        aws-secret-access-key: 7MIwXwxs2xGjw93S4SIPEDEBXWltF/Tep4XmWbn0
        aws-session-token: IQoJb3JpZ2luX2VjEOz//////////wEaCXVzLWVhc3QtMSJHMEUCIDR6E7RIIHvBESO9lRQJzB8c71U48tBzZMfxkvXVn6gOAiEA9LVvnWD0s+kYu2XNEfrmrgP5OkRVPagbPJs9l5wB0zQqqgIIlf//////////ARAAGgw2NjI5NjI2NzA3ODIiDHNpovX4zQRaVj/xKCr+AbEMHHz4h+WkpxfHEtYq8tZhISUlwc7rSh8bmq2rWoi+fkzrtiVjMBvYjv8AsrZ5XkAypPwApWpKP9Zpb5mhZWiy8D4b/oZY4wZ0UeqHDDreS6rsPJySdpqX2wYyhfyXvdPAQ87qlJcpfiyNGIiP8ylLCBGXwCIvwSwT0jrcjwJKZlBGtmhR4q8GnFOwRbeBQUr6MQlg3eyWQsFE3MtIaCiUPaydXXs/VD/zruvIS86W0F76oKD9Y7KrTd+L/wD5YivOgsFA5PR/HgoWGlw1+91c6xuZQ3y6VR+8uxybg3DZHfZoJ1yG8vAQtxAUfI2/q/8N7vvbjLT3dU4bg+CvMJvQ/p8GOp0BgVAmlH8ONWZ2dJWPTcaxp9f/rYQQGAiqc2p/8V51n+F/exzIGvMpa9PRJaPman0McHsX/cnSCP65OmK4LdvI15OcStW+Ku3ihfAWyKG0G4G66dxt93aGTUyK5tpj3NAsp1bZA22UGWjoPOqzJhdGBeZqmzJ8Sda6svpWJJQ4DMXHlHP+gunTVY8+aF8iYaXxYCVL+YHXKpmDH+S+Kg==
        aws-region: us-east-1
      
    - name: Login to Amazon ECR Public
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry-type: public
          
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        #docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$ECR_REPOSITORY .
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REPOSITORY:$IMAGE_TAG
        #docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
